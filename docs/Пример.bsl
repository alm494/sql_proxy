#Область ПрограммныйИнтерфейс

// Создает или получает новое соединение с SQL-сервером
// Возвращаемое значение: 
// 		GUID соединения - Строка
Функция СоздатьSQLСоединение() Экспорт
	
	HTTPСоединение = Новый HTTPСоединение("localhost", 8080);
	Путь = "/api/v1/connection";
	ТелоJSON = СериализоватьВJSON(
		Новый Структура(
			"host,port,user,password,db_type,db_name,ssl",
			"127.0.0.1", 5432, "postgres", "postgres", "postgres", "test", Ложь
	));  // перепишите под себя, чтобы не хранить пароли в тексте программы                     
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("API-Version", "1.2");	
	Заголовки.Вставить("Content-Type", "application/json;charset=UTF-8");	
	
	HTTPЗапрос = Новый HTTPЗапрос(Путь, Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоJSON);

	Ответ = HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
	КодРезультата = Ответ.КодСостояния;
	SQLСоединение = Ответ.ПолучитьТелоКакСтроку();
	Если КодРезультата = 200 Тогда	
		Возврат SQLСоединение;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Закрывает и удаляет соединение с SQL-сервером
// Параметры: 
// 		SQLСоединение - Строка - GUID открытого соединения
Функция УдалитьSQLСоединение(SQLСоединение) Экспорт
	
	HTTPСоединение = Новый HTTPСоединение("localhost", 8080);
	Путь = "/api/v1/connection";
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("API-Version", "1.2");	
	Заголовки.Вставить("Connection-Id", SQLСоединение);	
	
	HTTPЗапрос = Новый HTTPЗапрос(Путь, Заголовки);

	Ответ = HTTPСоединение.ВызватьHTTPМетод("DELETE", HTTPЗапрос);
	КодРезультата = Ответ.КодСостояния;
	Если КодРезультата = 200 Тогда	
		SQLСоединение = "";
	КонецЕсли;

	Возврат КодРезультата;

КонецФункции

// Выполняет обычные SQL-запросы вида выборки таблиц
// Параметры: 
// 		SQLСоединение - Строка - GUID открытого соединения
// 		SQLЗапрос 	  - Строка - Текст SQL-запроса
// Возвращаемое значение: 
// 		Результат запроса - Структура, содержащая массив структур - результат выборки запроса
Функция ЗапросВыборкаДанных(SQLСоединение, SQLЗапрос) Экспорт
	
	HTTPСоединение = Новый HTTPСоединение("localhost", 8080);
	Путь = "/api/v1/HTTPЗапрос";                        	

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("API-Version", "1.2");	
	Заголовки.Вставить("Connection-Id", SQLСоединение);	
	Заголовки.Вставить("Content-Type", "text/plain;charset=UTF-8");	

	HTTPЗапрос = Новый HTTPЗапрос(Путь, Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(SQLЗапрос);
	
	Ответ = HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
	КодРезультата = Ответ.КодСостояния;
	Если КодРезультата = 200 Тогда	
		Возврат ДесериализоватьИзJSON(Ответ.ПолучитьТелоКакСтроку());
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

// Выполняет SQL-запросы вида изменения таблиц (INSERT, UPDATE, DELETE и т.д.)
// Параметры: 
// 		SQLСоединение - Строка - GUID открытого соединения
// 		SQLЗапрос 	  - Строка - Текст SQL-запроса
Функция ЗапросИзменениеДанных(SQLСоединение, SQLЗапрос) Экспорт
	
	HTTPСоединение = Новый HTTPСоединение("localhost", 8080);
	Путь = "/api/v1/HTTPЗапрос";
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("API-Version", "1.2");	
	Заголовки.Вставить("Connection-Id", SQLСоединение);	
	Заголовки.Вставить("Content-Type", "text/plain;charset=UTF-8");	
	
	HTTPЗапрос = Новый HTTPЗапрос(Путь, Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(SQLЗапрос);

	Ответ = HTTPСоединение.ВызватьHTTPМетод("PUT", HTTPЗапрос);
	Возврат Ответ.КодСостояния;

КонецФункции

// Создает подготовленный оператор (Prepared statement)
// Параметры: 
// 		SQLСоединение - Строка - GUID открытого соединения
// 		SQLЗапрос 	  - Строка - Текст SQL-запроса
// Возвращаемое значение: 
// 		GUID оператора - Строка
Функция СоздатьПодготовленныйОператор(SQLСоединение, SQLЗапрос) Экспорт

	HTTPСоединение = Новый HTTPСоединение("localhost", 8080);
	Путь = "/api/v1/prepared";
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("API-Version", "1.2");	
	Заголовки.Вставить("Connection-Id", Соединение);	
	Заголовки.Вставить("Content-Type", "text/plain;charset=UTF-8");	
	
	HTTPЗапрос = Новый HTTPЗапрос(Путь, Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(SQLЗапрос);

	Ответ = HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
	КодРезультата = Ответ.КодСостояния;
	Результат = Ответ.ПолучитьТелоКакСтроку();
	Если КодРезультата = 200 Тогда	
		Возврат Результат;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

// Удаляет подготовленный оператор (Prepared statement)
// Параметры: 
// 		SQLСоединение - Строка - GUID открытого соединения
// 		SQLОператор   - Строка - GUID оператора
Функция УдалитьПодготовленныйОператор(SQLСоединение, SQLОператор) Экспорт
	
	HTTPСоединение = Новый HTTPСоединение("localhost", 8080);
	Путь = "/api/v1/prepared";
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("API-Version", "1.2");	
	Заголовки.Вставить("Connection-Id", SQLСоединение);	
	Заголовки.Вставить("Statement-Id", SQLОператор);	
	
	HTTPЗапрос = Новый HTTPЗапрос(Путь, Заголовки);

	Ответ = HTTPСоединение.ВызватьHTTPМетод("DELETE", HTTPЗапрос);
	Возврат Ответ.КодСостояния;

КонецФункции

// Выполнить подготовленный оператор (Prepared statement) с выборкой данных
// Параметры: 
// 		SQLСоединение - Строка - GUID открытого соединения
// 		SQLОператор   - Строка - GUID оператора
// 		Парам   	  - Массив - Параметры для подготовленного оператора
// Возвращаемое значение: 
// 		Результат запроса - Структура, содержащая массив структур - результат выборки запроса
Функция ВыполнитьПодготовленныйОператорВыборка(SQLСоединение, SQLОператор, Парам) Экспорт
	
	HTTPСоединение = Новый HTTPСоединение("localhost", 8080);
	Путь = "/api/v1/prepared/HTTPЗапрос";
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("API-Version", "1.2");	
	Заголовки.Вставить("Connection-Id", Соединение);	
	Заголовки.Вставить("Statement-Id", Оператор);	
	Заголовки.Вставить("Content-Type", "application/json;charset=UTF-8");	

	ПараметрыJSON = СериализоватьВJSON(Парам);	

	HTTPЗапрос = Новый HTTPЗапрос(Путь, Заголовки);	
	HTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыJSON);

	Ответ = HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
	КодРезультата = Ответ.КодСостояния;
	
	Если КодРезультата = 200 Тогда	
		Возврат ДесериализоватьИзJSON(Ответ.ПолучитьТелоКакСтроку());
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

// Выполнить подготовленный оператор (Prepared statement) на изменение данных
// Параметры: 
// 		SQLСоединение - Строка - GUID открытого соединения
// 		SQLОператор   - Строка - GUID оператора
// 		Парам   	  - Массив - Параметры для подготовленного оператора
Функция ВыполнитьПодготовленныйОператорИзменение(SQLСоединение, SQLОператор, Парам) Экспорт
	
	HTTPСоединение = Новый HTTPСоединение("localhost", 8080);
	Путь = "/api/v1/prepared/HTTPЗапрос";
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("API-Version", "1.2");	
	Заголовки.Вставить("Connection-Id", Соединение);	
	Заголовки.Вставить("Statement-Id", Оператор);	
	Заголовки.Вставить("Content-Type", "application/json;charset=UTF-8");	

	ПараметрыJSON = СериализоватьВJSON(Парам);	

	HTTPЗапрос = Новый HTTPЗапрос(Путь, Заголовки);	
	HTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыJSON);

	Ответ = HTTPСоединение.ВызватьHTTPМетод("PUT", HTTPЗапрос);
	Возврат Ответ.КодСостояния;

КонецФункции

// Прочитать поле BLOB из таблицы
// Параметры: 
// 		SQLСоединение - Строка - GUID открытого соединения
// 		SQLЗапрос 	  - Строка - Текст SQL-запроса, содержащий выборку *одного*
//                               поля бинарного типа BYTEA, BLOB, IMAGE и т.д.
//
Функция ПрочитатьBlob(SQLСоединение, SQLЗапрос) Экспорт
	
	HTTPСоединение = Новый HTTPСоединение("localhost", 8080);
	Путь = "/api/v1/blob";                        	

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("API-Version", "1.2");	
	Заголовки.Вставить("Connection-Id", HTTPСоединение);	
	Заголовки.Вставить("Content-Type", "text/plain;charset=UTF-8");	

	HTTPЗапрос = Новый HTTPЗапрос(Путь, Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(SQLЗапрос);
		
	Ответ = http.ВызватьHTTPМетод("POST", HTTPЗапрос);
	КодРезультата = Ответ.КодСостояния;
	Если КодРезультата = 200 Тогда
		Возврат ПоместитьВоВременноеХранилище(Ответ.ПолучитьТелоКакДвоичныеДанные(), Новый УникальныйИдентификатор());
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

// Записать поле BLOB в таблицу
// Параметры: 
// 		SQLСоединение - Строка - GUID открытого соединения
// 		SQLЗапрос 	  - Строка - Текст SQL-запроса, содержащий инструкции INSERT или UPDATE
//                               и *один* параметр указывающий на значение бинарного типа BYTEA, BLOB,
//								 IMAGE и т.д.
//		Адрес		  - Строка - Адрес временного хранилища, содержащий двоичные данные
//
Функция ЗаписатьBlob(SQLСоединение, SQLЗапрос, Адрес) Экспорт
	
	HTTPСоединение = Новый HTTPСоединение("localhost", 8080);
	Путь = "/api/v1/blob";                        	

	Разделитель = СтрЗаменить(Новый УникальныйИдентификатор(), "-", "");

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("API-Version", "1.2");	
	Заголовки.Вставить("Connection-Id", HTTPСоединение);	
	Заголовки.Вставить("Content-Type", "multipart/form-data; boundary=" + Разделитель);	

	Поток = Новый ПотокВПамяти;
	Запись = Новый ЗаписьДанных(Поток,,, Символы.ВК + Символы.ПС, "");
	Запись.ЗаписатьСтроку("--" + Разделитель);
	Запись.ЗаписатьСтроку("Content-Disposition: form-data; name=sql_query;");
	
	Запись.ЗаписатьСтроку("Content-Type: text/html");
	Запись.ЗаписатьСтроку("");
	Запись.ЗаписатьСтроку(Запрос);	
	Запись.ЗаписатьСтроку("--" + Разделитель);
	Запись.ЗаписатьСтроку("Content-Disposition: form-data; name=binary_data;filename=blob_data");
	Запись.ЗаписатьСтроку("Content-Type: application/octet-stream");
	Запись.ЗаписатьСтроку("");
	Запись.Записать(ПолучитьИзВременногоХранилища(Адрес));
	Запись.ЗаписатьСтроку("");
	Запись.ЗаписатьСтроку("--" + Разделитель + "--");
	Запись.ЗаписатьСтроку("");
	Запись.Закрыть();

	HTTPЗапрос = Новый HTTPЗапрос(Путь, Заголовки);
	HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(Поток.ЗакрытьИПолучитьДвоичныеДанные());
		
	Ответ = http.ВызватьHTTPМетод("PUT", HTTPЗапрос);
	Возврат Ответ.КодСостояния;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СериализоватьВJSON(Значение) Экспорт
    
    Настройки = Новый НастройкиСериализацииJSON();
    Настройки.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
    Настройки.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
    
    ЗаписьJSON = Новый ЗаписьJSON;
    ЗаписьJSON.УстановитьСтроку();
    ЗаписатьJSON(ЗаписьJSON, Значение, Настройки);
    СтрокаJSON = ЗаписьJSON.Закрыть();
    
    Возврат СтрокаJSON;
    
КонецФункции

Функция ДесериализоватьИзJSON(СтрокаJSON, ПоляДата = "")
    
    ЧтениеJSON = Новый ЧтениеJSON;
    ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
    Значение = ПрочитатьJSON(ЧтениеJSON,, ПоляДата, ФорматДатыJSON.ISO);          
    ЧтениеJSON.Закрыть();
    Возврат Значение;
    
КонецФункции

#КонецОбласти
