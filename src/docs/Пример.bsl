#Область ПрограммныйИнтерфейс

// Создает или получает новое соединение с SQL-сервером
// Возвращаемое значение: 
// 		GUID соединения - Строка
Функция СоздатьSQLСоединение() Экспорт
	
	http = Новый HTTPСоединение("localhost", 8080);
	path = "/api/v1/connection";
	json_body = СериализоватьВJSON(
		Новый Структура(
			"host,port,user,password,db_type,db_name,ssl",
			"127.0.0.1", 5432, "postgres", "postgres", "postgres", "test", Ложь
	));                        
	
	headers = Новый Соответствие;
	headers.Вставить("Content-Type", "application/json;charset=UTF-8");	
	
	query = Новый HTTPЗапрос(path, headers);
	query.УстановитьТелоИзСтроки(json_body);

	Ответ = http.ВызватьHTTPМетод("POST", query);
	КодРезультата = Ответ.КодСостояния;
	SQLСоединение = Ответ.ПолучитьТелоКакСтроку();
	Если КодРезультата = 200 Тогда	
		Возврат SQLСоединение;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Закрывает и удаляет соединение с SQL-сервером
// Параметры: 
// 		SQLСоединение - Строка - GUID открытого соединения
Процедура УдалитьSQLСоединение(SQLСоединение) Экспорт
	
	http = Новый HTTPСоединение("localhost", 8080);
	path = "/api/v1/connection";
	
	headers = Новый Соответствие;
	headers.Вставить("Connection-Id", SQLСоединение);	
	
	query = Новый HTTPЗапрос(path, headers);

	Ответ = http.ВызватьHTTPМетод("DELETE", query);
	КодРезультата = Ответ.КодСостояния;
	Результат = Ответ.ПолучитьТелоКакСтроку();
	Если КодРезультата = 200 Тогда	
		SQLСоединение = "";
	КонецЕсли;

КонецПроцедуры

// Выполняет обычные SQL-запросы вида выборки таблиц
// Параметры: 
// 		SQLСоединение - Строка - GUID открытого соединения
// 		SQLЗапрос 	  - Строка - Текст SQL-запроса
// Возвращаемое значение: 
// 		Результат запроса - Структура
Функция ЗапросВыборкаДанных(SQLСоединение, SQLЗапрос) Экспорт
	
	http = Новый HTTPСоединение("localhost", 8080);
	path = "/api/v1/query";                        	

	headers = Новый Соответствие;
	headers.Вставить("Connection-Id", SQLСоединение);	
	headers.Вставить("SQL-Statement", КодироватьСтроку(SQLЗапрос, СпособКодированияСтроки.КодировкаURL));	

	query = Новый HTTPЗапрос(path, headers);
	
	Ответ = http.ВызватьHTTPМетод("GET", query);
	КодРезультата = Ответ.КодСостояния;
	Если КодРезультата = 200 Тогда	
		Результат = Ответ.ПолучитьТелоКакСтроку();
		Возврат ДесериализоватьИзJSON(Результат);
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

// Выполняет SQL-запросы вида изменения таблиц (INSERT, UPDATE, DELETE и т.д.)
// Параметры: 
// 		SQLСоединение - Строка - GUID открытого соединения
// 		SQLЗапрос 	  - Строка - Текст SQL-запроса
Процедура ЗапросИзменениеДанных(SQLСоединение, SQLЗапрос) Экспорт
	
	http = Новый HTTPСоединение("localhost", 8080);
	path = "/api/v1/query";
	
	headers = Новый Соответствие;
	headers.Вставить("Connection-Id", SQLСоединение);	
	headers.Вставить("SQL-Statement", КодироватьСтроку(SQLЗапрос, СпособКодированияСтроки.КодировкаURL));	
	
	query = Новый HTTPЗапрос(path, headers);

	Ответ = http.ВызватьHTTPМетод("POST", query);
	КодРезультата = Ответ.КодСостояния;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДесериализоватьИзJSON(СтрокаJSON, ПоляДата = "")
    
    ЧтениеJSON = Новый ЧтениеJSON;
    ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
    Значение = ПрочитатьJSON(ЧтениеJSON,, ПоляДата, ФорматДатыJSON.ISO);          
    ЧтениеJSON.Закрыть();
    Возврат Значение;
    
КонецФункции

#КонецОбласти
